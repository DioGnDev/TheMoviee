//
//  DetailMovieInteractor.swift
//  TheMoviee
//
//  Created by Ilham Hadi Prabawa on 2/24/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates
//
//

import Foundation

protocol DetailMovieInteractorLogic {
    func getDetailMovie(param: DetailMovieRequest)
    func getReview(param: ReviewRequest)
    func getTrialer(param: TrailerRequest)
}

class DetailMovieInteractor: DetailMovieInteractorLogic {
    
    //presenter
    var presenter: DetailMoviePresenterLogic?
    
    //usecase
    var getDetailMovieUsecase: GetDetailMovieUsecase
    var reviewUsecase: ReviewUsecase
    var getTrailerUsecase: GetTrailerUsecase
    
    //initial
    init(getDetailMovieUsecase: GetDetailMovieUsecase,
         reviewUsecase: ReviewUsecase,
         getTrailerUsecase: GetTrailerUsecase) {
        
        self.getDetailMovieUsecase = getDetailMovieUsecase
        self.reviewUsecase = reviewUsecase
        self.getTrailerUsecase = getTrailerUsecase
    }
    
    //example method 
    func getDetailMovie(param: DetailMovieRequest) {
        getDetailMovieUsecase.execute(param: param) { (result) in
            switch result {
            case .failure(let error):
                self.presenter?.presentAlert(with: error.errorType.description)
                break
            case .success(let entity):
                self.presenter?.presentDetailMovie(entity: entity)
                break
            }
        }
    }
    
    func getReview(param: ReviewRequest) {
        reviewUsecase.execute(param: param) { (result) in
            switch result {
            case let .failure(error):
                self.presenter?.presentAlert(with: error.errorType.description)
            case let .success(entities):
                self.presenter?.presentReview(entities: entities)
            }
        }
    }
    
    
    func getTrialer(param: TrailerRequest) {
        getTrailerUsecase.execute(param: param) { (result) in
            switch result {
            case let .failure(error):
                self.presenter?.presentAlert(with: error.errorType.description)
            case let .success(entities):
                self.presenter?.presentTrailer(entities: entities)
            }
        }
    }
}
