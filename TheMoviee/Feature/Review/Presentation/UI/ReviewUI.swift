//
//  ReviewUI.swift
//  TheMoviee
//
//  Created by Ilham Hadi Prabawa on 2/24/21.
//  Copyright (c) 2021 ___ORGANIZATIONNAME___. All rights reserved.
//
//  This file was generated by the VIP Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//

import Foundation
import UIKit
import SkeletonView

protocol ReviewDisplayLogic: BaseDisplayLogic{
    func displayReview(viewModel: [ReviewViewModel])
    func displayMoreReview(viewModels: [ReviewViewModel])
}

class ReviewUI: BaseViewController{
    
    //dependency
    var interactor: ReviewInteractorLogic?
    var router: ReviewRouterLogic?
    
    //state
    let state = ReviewUIState()
    
    //view
    @IBOutlet weak var reviewTableView: UITableView!
    
    init() {
        super.init(nibName: nil, bundle: nil)
        ReviewConfigurator.inject(dependencyFor: self)
    }
    
    required init?(coder: NSCoder) {
        super.init(coder: coder)
        ReviewConfigurator.inject(dependencyFor: self)
    }
    
    override func viewWillAppear(_ animated: Bool) {
        super.viewWillAppear(animated)
    }
    
    override func viewWillDisappear(_ animated: Bool) {
        super.viewWillDisappear(animated)
    }
    
    override func viewDidLoad() {
        super.viewDidLoad()
        
        controllerName = "\(ReviewUI.self)"
        
        self.view.backgroundColor = .white
        
        reviewTableView.showAnimatedSkeleton()
        
        //initial request
        state.update(page: 1)
        let param = ReviewRequest(id: state.id, page: state.page)
        interactor?.getReview(param: param)
    }
    
    override func setupView() {
        super.setupView()
        
        reviewTableView.isSkeletonable = true
        reviewTableView.rowHeight = UITableView.automaticDimension
        reviewTableView.register(ReviewTableViewCell.nib, forCellReuseIdentifier: ReviewTableViewCell.identifier)
        reviewTableView.allowsSelection = false
    }
    
    func scrollViewDidScroll(_ scrollView: UIScrollView) {
       
        if !state.isLoadingMore && !state.isLastPage{
            let scrollViewContentHeight = reviewTableView.contentSize.height
            let scrollViewOffsetTreshold = scrollViewContentHeight - reviewTableView.bounds.size.height
            
            if scrollView.contentOffset.y > scrollViewOffsetTreshold && reviewTableView.isDragging {
                state.shouldLoading(true)
                state.update(page: state.page + 1)
                let request = ReviewRequest(id: state.id, page: 1)
                interactor?.getMoreReview(param: request)
            }
        }
    
    }
    
}
